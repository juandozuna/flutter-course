// Mocks generated by Mockito 5.2.0 from annotations
// in section_8/test/unit_test/providers/navigator_util.dart.
// Do not manually edit this file.

import 'dart:async' as _i9;
import 'dart:ui' as _i10;

import 'package:flutter/foundation.dart' as _i6;
import 'package:flutter/scheduler.dart' as _i7;
import 'package:flutter/services.dart' as _i8;
import 'package:flutter/src/widgets/basic.dart' as _i4;
import 'package:flutter/src/widgets/focus_manager.dart' as _i2;
import 'package:flutter/src/widgets/framework.dart' as _i3;
import 'package:flutter/src/widgets/navigator.dart' as _i5;
import 'package:flutter/src/widgets/restoration.dart' as _i11;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeFocusScopeNode_0 extends _i1.Fake implements _i2.FocusScopeNode {
  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeValueNotifier_1<T> extends _i1.Fake implements _i4.ValueNotifier<T> {
}

class _FakeNavigator_2 extends _i1.Fake implements _i5.Navigator {
  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeBuildContext_3 extends _i1.Fake implements _i3.BuildContext {}

class _FakeWidget_4 extends _i1.Fake implements _i3.Widget {
  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeDiagnosticsNode_5 extends _i1.Fake implements _i3.DiagnosticsNode {
  @override
  String toString(
          {_i6.TextTreeConfiguration? parentConfiguration,
          _i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
}

class _FakeTicker_6 extends _i1.Fake implements _i7.Ticker {
  @override
  String toString({bool? debugIncludeStack = false}) => super.toString();
}

/// A class which mocks [NavigatorState].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigatorState extends _i1.Mock implements _i5.NavigatorState {
  MockNavigatorState() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.FocusScopeNode get focusScopeNode =>
      (super.noSuchMethod(Invocation.getter(#focusScopeNode),
          returnValue: _FakeFocusScopeNode_0()) as _i2.FocusScopeNode);
  @override
  _i4.ValueNotifier<bool> get userGestureInProgressNotifier =>
      (super.noSuchMethod(Invocation.getter(#userGestureInProgressNotifier),
              returnValue: _FakeValueNotifier_1<bool>())
          as _i4.ValueNotifier<bool>);
  @override
  bool get userGestureInProgress =>
      (super.noSuchMethod(Invocation.getter(#userGestureInProgress),
          returnValue: false) as bool);
  @override
  _i5.Navigator get widget => (super.noSuchMethod(Invocation.getter(#widget),
      returnValue: _FakeNavigator_2()) as _i5.Navigator);
  @override
  _i3.BuildContext get context =>
      (super.noSuchMethod(Invocation.getter(#context),
          returnValue: _FakeBuildContext_3()) as _i3.BuildContext);
  @override
  bool get mounted =>
      (super.noSuchMethod(Invocation.getter(#mounted), returnValue: false)
          as bool);
  @override
  bool get restorePending => (super
          .noSuchMethod(Invocation.getter(#restorePending), returnValue: false)
      as bool);
  @override
  void initState() => super.noSuchMethod(Invocation.method(#initState, []),
      returnValueForMissingStub: null);
  @override
  void restoreState(_i8.RestorationBucket? oldBucket, bool? initialRestore) =>
      super.noSuchMethod(
          Invocation.method(#restoreState, [oldBucket, initialRestore]),
          returnValueForMissingStub: null);
  @override
  void didToggleBucket(_i8.RestorationBucket? oldBucket) =>
      super.noSuchMethod(Invocation.method(#didToggleBucket, [oldBucket]),
          returnValueForMissingStub: null);
  @override
  void didChangeDependencies() =>
      super.noSuchMethod(Invocation.method(#didChangeDependencies, []),
          returnValueForMissingStub: null);
  @override
  void didUpdateWidget(_i3.StatefulWidget? oldWidget) =>
      super.noSuchMethod(Invocation.method(#didUpdateWidget, [oldWidget]),
          returnValueForMissingStub: null);
  @override
  void deactivate() => super.noSuchMethod(Invocation.method(#deactivate, []),
      returnValueForMissingStub: null);
  @override
  void activate() => super.noSuchMethod(Invocation.method(#activate, []),
      returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  _i9.Future<T?> pushNamed<T extends Object?>(String? routeName,
          {Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#pushNamed, [routeName], {#arguments: arguments}),
          returnValue: Future<T?>.value()) as _i9.Future<T?>);
  @override
  String restorablePushNamed<T extends Object?>(String? routeName,
          {Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(
              #restorablePushNamed, [routeName], {#arguments: arguments}),
          returnValue: '') as String);
  @override
  _i9.Future<T?> pushReplacementNamed<T extends Object?, TO extends Object?>(
          String? routeName,
          {TO? result,
          Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#pushReplacementNamed, [routeName],
              {#result: result, #arguments: arguments}),
          returnValue: Future<T?>.value()) as _i9.Future<T?>);
  @override
  String restorablePushReplacementNamed<T extends Object?, TO extends Object?>(
          String? routeName,
          {TO? result,
          Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#restorablePushReplacementNamed, [routeName],
              {#result: result, #arguments: arguments}),
          returnValue: '') as String);
  @override
  _i9.Future<T?> popAndPushNamed<T extends Object?, TO extends Object?>(
          String? routeName,
          {TO? result,
          Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#popAndPushNamed, [routeName],
              {#result: result, #arguments: arguments}),
          returnValue: Future<T?>.value()) as _i9.Future<T?>);
  @override
  String restorablePopAndPushNamed<T extends Object?, TO extends Object?>(
          String? routeName,
          {TO? result,
          Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#restorablePopAndPushNamed, [routeName],
              {#result: result, #arguments: arguments}),
          returnValue: '') as String);
  @override
  _i9.Future<T?> pushNamedAndRemoveUntil<T extends Object?>(
          String? newRouteName, _i5.RoutePredicate? predicate,
          {Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#pushNamedAndRemoveUntil, [newRouteName, predicate],
              {#arguments: arguments}),
          returnValue: Future<T?>.value()) as _i9.Future<T?>);
  @override
  String restorablePushNamedAndRemoveUntil<T extends Object?>(
          String? newRouteName, _i5.RoutePredicate? predicate,
          {Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#restorablePushNamedAndRemoveUntil,
              [newRouteName, predicate], {#arguments: arguments}),
          returnValue: '') as String);
  @override
  _i9.Future<T?> push<T extends Object?>(_i5.Route<T>? route) =>
      (super.noSuchMethod(Invocation.method(#push, [route]),
          returnValue: Future<T?>.value()) as _i9.Future<T?>);
  @override
  String restorablePush<T extends Object?>(
          _i5.RestorableRouteBuilder<T>? routeBuilder,
          {Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(
              #restorablePush, [routeBuilder], {#arguments: arguments}),
          returnValue: '') as String);
  @override
  _i9.Future<T?> pushReplacement<T extends Object?, TO extends Object?>(
          _i5.Route<T>? newRoute,
          {TO? result}) =>
      (super.noSuchMethod(
          Invocation.method(#pushReplacement, [newRoute], {#result: result}),
          returnValue: Future<T?>.value()) as _i9.Future<T?>);
  @override
  String restorablePushReplacement<T extends Object?, TO extends Object?>(
          _i5.RestorableRouteBuilder<T>? routeBuilder,
          {TO? result,
          Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#restorablePushReplacement, [routeBuilder],
              {#result: result, #arguments: arguments}),
          returnValue: '') as String);
  @override
  _i9.Future<T?> pushAndRemoveUntil<T extends Object?>(
          _i5.Route<T>? newRoute, _i5.RoutePredicate? predicate) =>
      (super.noSuchMethod(
          Invocation.method(#pushAndRemoveUntil, [newRoute, predicate]),
          returnValue: Future<T?>.value()) as _i9.Future<T?>);
  @override
  String restorablePushAndRemoveUntil<T extends Object?>(
          _i5.RestorableRouteBuilder<T>? newRouteBuilder,
          _i5.RoutePredicate? predicate,
          {Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#restorablePushAndRemoveUntil,
              [newRouteBuilder, predicate], {#arguments: arguments}),
          returnValue: '') as String);
  @override
  void replace<T extends Object?>(
          {_i5.Route<dynamic>? oldRoute, _i5.Route<T>? newRoute}) =>
      super.noSuchMethod(
          Invocation.method(
              #replace, [], {#oldRoute: oldRoute, #newRoute: newRoute}),
          returnValueForMissingStub: null);
  @override
  String restorableReplace<T extends Object?>(
          {_i5.Route<dynamic>? oldRoute,
          _i5.RestorableRouteBuilder<T>? newRouteBuilder,
          Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#restorableReplace, [], {
            #oldRoute: oldRoute,
            #newRouteBuilder: newRouteBuilder,
            #arguments: arguments
          }),
          returnValue: '') as String);
  @override
  void replaceRouteBelow<T extends Object?>(
          {_i5.Route<dynamic>? anchorRoute, _i5.Route<T>? newRoute}) =>
      super.noSuchMethod(
          Invocation.method(#replaceRouteBelow, [],
              {#anchorRoute: anchorRoute, #newRoute: newRoute}),
          returnValueForMissingStub: null);
  @override
  String restorableReplaceRouteBelow<T extends Object?>(
          {_i5.Route<dynamic>? anchorRoute,
          _i5.RestorableRouteBuilder<T>? newRouteBuilder,
          Object? arguments}) =>
      (super.noSuchMethod(
          Invocation.method(#restorableReplaceRouteBelow, [], {
            #anchorRoute: anchorRoute,
            #newRouteBuilder: newRouteBuilder,
            #arguments: arguments
          }),
          returnValue: '') as String);
  @override
  bool canPop() =>
      (super.noSuchMethod(Invocation.method(#canPop, []), returnValue: false)
          as bool);
  @override
  _i9.Future<bool> maybePop<T extends Object?>([T? result]) =>
      (super.noSuchMethod(Invocation.method(#maybePop, [result]),
          returnValue: Future<bool>.value(false)) as _i9.Future<bool>);
  @override
  void pop<T extends Object?>([T? result]) =>
      super.noSuchMethod(Invocation.method(#pop, [result]),
          returnValueForMissingStub: null);
  @override
  void popUntil(_i5.RoutePredicate? predicate) =>
      super.noSuchMethod(Invocation.method(#popUntil, [predicate]),
          returnValueForMissingStub: null);
  @override
  void removeRoute(_i5.Route<dynamic>? route) =>
      super.noSuchMethod(Invocation.method(#removeRoute, [route]),
          returnValueForMissingStub: null);
  @override
  void removeRouteBelow(_i5.Route<dynamic>? anchorRoute) =>
      super.noSuchMethod(Invocation.method(#removeRouteBelow, [anchorRoute]),
          returnValueForMissingStub: null);
  @override
  void finalizeRoute(_i5.Route<dynamic>? route) =>
      super.noSuchMethod(Invocation.method(#finalizeRoute, [route]),
          returnValueForMissingStub: null);
  @override
  void didStartUserGesture() =>
      super.noSuchMethod(Invocation.method(#didStartUserGesture, []),
          returnValueForMissingStub: null);
  @override
  void didStopUserGesture() =>
      super.noSuchMethod(Invocation.method(#didStopUserGesture, []),
          returnValueForMissingStub: null);
  @override
  _i3.Widget build(_i3.BuildContext? context) =>
      (super.noSuchMethod(Invocation.method(#build, [context]),
          returnValue: _FakeWidget_4()) as _i3.Widget);
  @override
  void reassemble() => super.noSuchMethod(Invocation.method(#reassemble, []),
      returnValueForMissingStub: null);
  @override
  void setState(_i10.VoidCallback? fn) =>
      super.noSuchMethod(Invocation.method(#setState, [fn]),
          returnValueForMissingStub: null);
  @override
  void debugFillProperties(_i6.DiagnosticPropertiesBuilder? properties) =>
      super.noSuchMethod(Invocation.method(#debugFillProperties, [properties]),
          returnValueForMissingStub: null);
  @override
  String toString({_i3.DiagnosticLevel? minLevel = _i3.DiagnosticLevel.info}) =>
      super.toString();
  @override
  String toStringShort() => (super
          .noSuchMethod(Invocation.method(#toStringShort, []), returnValue: '')
      as String);
  @override
  _i3.DiagnosticsNode toDiagnosticsNode(
          {String? name, _i6.DiagnosticsTreeStyle? style}) =>
      (super.noSuchMethod(
          Invocation.method(
              #toDiagnosticsNode, [], {#name: name, #style: style}),
          returnValue: _FakeDiagnosticsNode_5()) as _i3.DiagnosticsNode);
  @override
  _i7.Ticker createTicker(_i7.TickerCallback? onTick) =>
      (super.noSuchMethod(Invocation.method(#createTicker, [onTick]),
          returnValue: _FakeTicker_6()) as _i7.Ticker);
  @override
  void registerForRestoration(
          _i11.RestorableProperty<Object?>? property, String? restorationId) =>
      super.noSuchMethod(
          Invocation.method(#registerForRestoration, [property, restorationId]),
          returnValueForMissingStub: null);
  @override
  void unregisterFromRestoration(_i11.RestorableProperty<Object?>? property) =>
      super.noSuchMethod(
          Invocation.method(#unregisterFromRestoration, [property]),
          returnValueForMissingStub: null);
  @override
  void didUpdateRestorationId() =>
      super.noSuchMethod(Invocation.method(#didUpdateRestorationId, []),
          returnValueForMissingStub: null);
}

/// A class which mocks [GlobalKey].
///
/// See the documentation for Mockito's code generation for more information.
class MockGlobalKey extends _i1.Mock
    implements _i3.GlobalKey<_i5.NavigatorState> {
  MockGlobalKey() {
    _i1.throwOnMissingStub(this);
  }
}
